#!/bin/bash
#global variables
declare -A MATRIX #declare an array that will be used to store the numbers

#function for building a matrix (2D arrray) out of the input file rows and cols
build_matrix () {
  local ROWS=$1
  local COLS=$2
  local INPUT=$3
  for ((i=1;i<=ROWS;i++)) do
    for ((j=1; j<=COLS; j++)) do
      MATRIX[$i,$j]=$(cat <(echo "$INPUT") | head -$i | tail -1 | cut -f $j)
    done
  done
}

#function for computing stats on rows
compute_rows () {
  local ROWS=$1
  local COLS=$2
  echo "Average	Median"
  for ((i=1; i<=ROWS; i++)) do
    local TEMPSUM=0
    local TEMPROW=""
    local TEMPMED=0
    local -i TEMPCUT=$((($COLS+1) / 2))
    if [ $(($COLS % 2)) -eq 0 ]; then TEMPCUT+=1; fi
    for ((j=1; j<=COLS; j++)) do
      TEMPSUM=$(($TEMPSUM + ${MATRIX[$i,$j]}))
      TEMPROW+="${MATRIX[$i,$j]}	"
    done
    TEMPROW=${TEMPROW%?} #trim trailing \t
    local MEDIAN=$(cat <(echo "$TEMPROW") | tr "\t" "\n" | sort -n | head -$TEMPCUT | tail -1)
    let "AVERAGE = ($TEMPSUM + ($COLS/2)) / $COLS"
    echo "$AVERAGE	$MEDIAN"
  done
}

#function for computing stats on columns
compute_cols () {
  local ROWS=$1
  local COLS=$2
  local -i TEMPCUT=$((($ROWS+1) / 2))
  if [ $(($ROWS % 2)) -eq  0 ]; then TEMPCUT+=1; fi
  local MEDIAN=""
  local AVERAGE=""
  echo "Average"
  for ((i=1; i<=COLS; i++)) do
    local TEMPSUM=$(( $(echo "$INPUT" | cut -f $i | tr "\n" "+" | cut -f 1-$(( $ROWS*2-1 )) -d"+") ))
    AVERAGE+="$(( ($TEMPSUM + ($ROWS/2)) / $ROWS ))	"
  done
  echo "$AVERAGE"
  echo "Median"
  for ((i=1; i<=COLS; i++)) do
    MEDIAN+="$(echo "$INPUT" | cut -f $i | sort -n | head -$TEMPCUT | tail -1)	"
  done
  echo "$MEDIAN"
}

main() {
  #setup variables
  local PROGNAME=$0
  local R_C_FLAG=$1
  local USAGE="Usage: $PROGNAME: {-rows|-cols} [file]"
  local declare INPUT

  #Deal with all possible input options pipe/stdin/file param
  #Test if input is from a pipe
  if [ ! -p /dev/fd/0 ]
  then
    #test if there are two params
    if [ $# -eq 2 ]
    then
      #if so deal with file input param
      #test if file exists
      if [ ! -e $2 ]
      then
        echo "$PROGNAME: $2 file does not exist" >&2
        exit 1
      #test if file is readable
      elif [ ! -r $2 ]
      then
        echo "$PROGNAME: Cannot read file $2" >&2
        exit 1
      #if file exists and is readable, read into INPUT
      else
        INPUT=$(cat $2)
      fi
    #test if there is only 1 param, if so assume stdin
    elif [ $# -eq 1  ]
    then
      #test if there is input from stdin
      if [ ! -t 0 ]
      then
        #if so read into INPUT
        INPUT=$(cat "-")
      else
        #if not print usage and exit 
        echo "$USAGE" >&2
        exit 1
      fi
    #if params are not 1 or 2, print usage and exit
    else
      echo "$USAGE" >&2
      exit 1
    fi
  #if input is from a pipe
  else
    #test if 1 argument. If so, read pipe into INPUT
    if [ $# -eq 1 ]
    then
      INPUT=$(cat "-")
    else
      #otherwise print usage and exit
      echo "$USAGE" >&2
      exit 1
    fi
  fi

  #build row and column counts for use in loops
  local ROWS=$(echo "$INPUT" | wc -l)
  local COLS=$(echo "$INPUT" | head -1 | wc -w)
  #if rows or columns are emtpy, it means the file is empty
  if [ $ROWS -eq 0 -o $COLS -eq 0 ]
  then
    echo "File is empty" >&2
    exit 1
  fi
  build_matrix $ROWS $COLS "$INPUT"
 
  #check if col or row flag was used and call appropriate function
  #if flag was bad syntax, echo usage and exit 1
  if [[ $R_C_FLAG = "-c"* ]]
  then
    compute_cols $ROWS $COLS
  elif [[ $R_C_FLAG = "-r"* ]]
  then
    compute_rows $ROWS $COLS
  else
    echo $USAGE >&2
    exit 1
  fi

}

main "$@"
