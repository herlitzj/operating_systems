#!/bin/bash
#global variables
declare -A MATRIX #declare an array that will be used to store the numbers

#function for building a matrix out of the input file rows and cols
build_matrix () {
  local ROWS=$1
  local COLS=$2
  local INPUT=$3
  echo "Rows: $ROWS, Cols: $COLS"

  for ((i=1;i<=ROWS;i++)) do
    for ((j=1;j<=COLS;j++)) do
      MATRIX[$i,$j]=$(cat <(echo "$INPUT") | head -$i | tail -1 | cut -f $j)
    done
  done
}

#function for handling rows
compute_rows () {
  local ROWS=$1
  local COLS=$2
  echo "Rows"
  echo "Average Median"
  for ((i=1;i<=ROWS;i++)) do
    local TEMPSUM=0
    local TEMPROW=""
    local TEMPMED=0
    local TEMPCUT=$((($COLS+1) / 2))
    for ((j=1;j<=COLS;j++)) do
      TEMPSUM=$(($TEMPSUM + ${MATRIX[$i,$j]}))
      TEMPROW+="${MATRIX[$i,$j]}	"
    done
    TEMPROW=${TEMPROW%?} #trim trailing \t
    TEMPMED=$(cat <(echo "$TEMPROW") | tr "\t" "\n" | sort | head -$TEMPCUT | tail -1)
    let "SUM = ($TEMPSUM + ($COLS/2)) / $COLS"
    echo "$SUM	$TEMPMED"
  done
}

#function for handling columns
compute_cols () {
  echo "Cols"
}

main() {
  local PROGNAME=$0
  local R_C_FLAG=$1
  local USAGE="$PROGNAME: {-rows|-cols} [file]"
  local declare INPUT

  #Test if input is from a file or from stdin
  if [ $# -eq 2 -a -f "$2" ]
  then
    INPUT=$(cat $2)
  #catch invalid file input
  elif [ ! -f $2 ]
  then
    echo "$PROGNAME: Cannot read file $2" >&2
    exit 1
  #catch too many args
  elif [ $# -gt 2 ]
  then
    echo "$USAGE" >&2
    exit 1
  #load stream from stdin
  else
    #catch too few args
    if [ $# -lt 1 ]
    then
      echo "$USAGE" >&2
      exit 1
    fi
    INPUT=$(cat "-")
  fi

  #build row and column counts for use in loops
  echo "INPUT:"
  echo "$INPUT"
  local ROWS=$(echo "$INPUT" | wc -l)
  local COLS=$(echo "$INPUT" | head -1 | wc -w)
  #if rows or columns are emtpy, it means the file is empty
  if [ $ROWS -eq 0 -o $COLS -eq 0 ]
  then
    echo "File is empty" >&2
    exit 1
  fi
  build_matrix $ROWS $COLS "$INPUT"
 
  #check if col or row flag was used and call appropriate function
  #if flag was bad syntax, echo usage and exit 1
  if [[ $R_C_FLAG = "-c"* ]]
  then
    compute_cols $ROWS $COLS
  elif [[ $R_C_FLAG = "-r"* ]]
  then
    compute_rows $ROWS $COLS
  else
    echo $USAGE >&2
    exit 1
  fi

}

main "$@"
